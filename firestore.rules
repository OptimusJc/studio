/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default posture, focusing on strict
 * authorization controls while adopting a flexible approach to data validation
 * for rapid prototyping. Data validation will be limited only to fields that are critical
 * for authorization and relational integrity. The rules enforce user ownership
 * where applicable and prevent unauthorized data access.
 *
 * Data Structure:
 * - Products are stored in top-level collections (e.g., `/wallpapers/{productId}`).
 * - Categories, Attributes, and AttributeValues are also stored in top-level
 *   collections.
 * - User profiles are stored under `/users/{userId}`.
 * - Share links created by a user are stored as subcollections under their
 *   user document in `/users/{userId}/shareLinks/{shareLinkId}`.
 * - Admin users are stored in the `roles_admin/{userId}` collection, where the document's existence grants admin privileges.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to product catalogs to allow open browsing.
 * - Data validation is relaxed for rapid prototyping, focusing on authorization.
 * - All write operations must pass authorization checks to prevent data
 *   tampering.
 * - Admin privileges are determined by the existence of a document in the `/roles_admin/{userId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin rights by checking if the document exists in the admin collection.
     * @returns {boolean} True if the user has admin rights, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
    
    /**
     * @description Rules for the 'wallpapers' collection.
     * @path /databases/{database}/documents/wallpapers/{productId}
     * @allow (create) - Any authenticated user can create a wallpaper product with their UID as the owner.
     * @deny (create) - An unauthenticated user cannot create a wallpaper product.
     * @allow (get, list) - Any user can read wallpaper product details and list them.
     * @allow (update, delete) - Only an admin can update or delete a wallpaper product.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /wallpapers/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the 'window-blinds' collection.
     * @path /databases/{database}/documents/window-blinds/{productId}
     * @allow (create) - Any authenticated user can create a window blind product with their UID as the owner.
     * @deny (create) - An unauthenticated user cannot create a window blind product.
     * @allow (get, list) - Any user can read window blind product details and list them.
     * @allow (update, delete) - Only an admin can update or delete a window blind product.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /window-blinds/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the 'wall-murals' collection.
     * @path /databases/{database}/documents/wall-murals/{productId}
     * @allow (create) - Any authenticated user can create a wall mural product with their UID as the owner.
     * @deny (create) - An unauthenticated user cannot create a wall mural product.
     * @allow (get, list) - Any user can read wall mural product details and list them.
     * @allow (update, delete) - Only an admin can update or delete a wall mural product.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /wall-murals/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the 'carpets' collection.
     * @path /databases/{database}/documents/carpets/{productId}
     * @allow (create) - Any authenticated user can create a carpet product with their UID as the owner.
     * @deny (create) - An unauthenticated user cannot create a carpet product.
     * @allow (get, list) - Any user can read carpet product details and list them.
     * @allow (update, delete) - Only an admin can update or delete a carpet product.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /carpets/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the 'window-films' collection.
     * @path /databases/{database}/documents/window-films/{productId}
     * @allow (create) - Any authenticated user can create a window film product with their UID as the owner.
     * @deny (create) - An unauthenticated user cannot create a window film product.
     * @allow (get, list) - Any user can read window film product details and list them.
     * @allow (update, delete) - Only an admin can update or delete a window film product.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /window-films/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the 'fluted-panels' collection.
     * @path /databases/{database}/documents/fluted-panels/{productId}
     * @allow (create) - Any authenticated user can create a fluted panel product with their UID as the owner.
     * @deny (create) - An unauthenticated user cannot create a fluted panel product.
     * @allow (get, list) - Any user can read fluted panel product details and list them.
     * @allow (update, delete) - Only an admin can update or delete a fluted panel product.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /fluted-panels/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the 'categories' collection.
     * @path /databases/{database}/documents/categories/{categoryId}
     * @allow (create) - Only an admin can create a category.
     * @deny (create) - An unauthenticated user cannot create a category.
     * @allow (get, list) - Any user can read category details and list them.
     * @allow (update, delete) - Only an admin can update or delete a category.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the 'attributes' collection.
     * @path /databases/{database}/documents/attributes/{attributeId}
     * @allow (create) - Only an admin can create an attribute.
     * @deny (create) - An unauthenticated user cannot create an attribute.
     * @allow (get, list) - Any user can read attribute details and list them.
     * @allow (update, delete) - Only an admin can update or delete an attribute.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /attributes/{attributeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the 'attributeValues' collection.
     * @path /databases/{database}/documents/attributeValues/{attributeValueId}
     * @allow (create) - Only an admin can create an attribute value.
     * @deny (create) - An unauthenticated user cannot create an attribute value.
     * @allow (get, list) - Any user can read attribute value details and list them.
     * @allow (update, delete) - Only an admin can update or delete an attribute value.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /attributeValues/{attributeValueId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the 'users' collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their authentication UID.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their authentication UID.
     * @allow (get) - A user can read their own profile.
     * @deny (get) - A user cannot read another user's profile.
     * @deny (list) - User listing is not allowed.
     * @allow (update) - A user can update their own profile.
     * @deny (update) - A user cannot update another user's profile.
     * @allow (delete) - A user can delete their own profile.
     * @deny (delete) - A user cannot delete another user's profile.
     * @principle Enforces user ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the 'shareLinks' subcollection under 'users'.
     * @path /databases/{database}/documents/users/{userId}/shareLinks/{shareLinkId}
     * @allow (create) - A user can create a share link under their own user ID.
     * @deny (create) - A user cannot create a share link under another user's ID.
     * @allow (get, list) - A user can read and list share links under their own user ID.
     * @deny (get, list) - A user cannot read or list share links under another user's ID.
     * @allow (update) - A user can update a share link under their own user ID.
     * @deny (update) - A user cannot update a share link under another user's ID.
     * @allow (delete) - A user can delete a share link under their own user ID.
     * @deny (delete) - A user cannot delete a share link under another user's ID.
     * @principle Enforces user ownership and prevents unauthorized data access.
     */
    match /users/{userId}/shareLinks/{shareLinkId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
      /**
       * @description Rules for the 'roles_admin' collection.
       * @path /databases/{database}/documents/roles_admin/{userId}
       * @allow (create) - Only an admin can create an admin role.
       * @deny (create) - A non-admin user cannot create an admin role.
       * @allow (get) - Any authenticated user can check if they are an admin.
       * @deny (list) - Admin role listing is not allowed.
       * @allow (update, delete) - Only an admin can update or delete an admin role.
       * @principle Restricts admin role creation and modification to existing admins.
       */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}